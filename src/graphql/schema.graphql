scalar DateTime

type Query {
	product: [User]
	listAllUsers: [User]
	findOne(id: Int!): Product
	seeProducts: [Product]
	searchProductsByCategory(category: ProductCategorys): [Product]
	showClientOrders(userId: Int): [Order]
	showMyOrder: [Order]
	findProductsPagination(
		conditions: ProductWhereInput
		skip: Int
		take: Int
	): [Product]
}
type Mutation {
	signUp(createUserDto: CreateUserDto!): User
	signOut: Message!
	createProduct(createProductDto: CreateProductDto!): Product
	updateProduct(id: Int!, updateProductDto: UpdateProductDto!): Product
	deleteProduct(id: Int!): Product
	disableProduct(id: Int!): Product
	addProductToCart(addItemToCartDto: AddItemToCartDto!): CartItem
	buyProducts(userId: Int!): Order
	likeProduct(productId: Int!): Like
	forgotPassword(email: String!): String
	validateResetPassword(token: String!, newPassword: String!): User

	# por ahora retorna un stirng, luego retornara un user modificdo
	# forgotPassword(forgotPasswordDto: ForgotPasswordDto!):
}

# DTO or INPUT for Create User
# El server requiere si o si los campos obligatorios que tiene este input
input CreateUserDto {
	email: String!
	firstName: String!
	lastName: String!
	password: String!
	roles: [UserRole]!
}

type User {
	id: Int!
	email: String!
	firstName: String!
	lastName: String!
	password: String!
	roles: [UserRole]!
	createdAt: DateTime
	updatedAt: DateTime
	Cart: Cart
	Orders: [Order]
	Like: [Like]
}
enum UserRole {
	MANAGER
	CLIENT
}

type Product {
	id: Int!
	name: String
	description: String!
	category: ProductCategorys!
	price: Float
	stock: Int
	isVisible: Boolean
	createdAt: DateTime
	updatedAt: DateTime
	CartItem: [CartItem]
	OrderItem: [OrderItem]
	Like: [Like]
	#   images      :[ProductImage]
}
enum ProductCategorys {
	ZAPATILLAS
	PLANTILLAS
	SANDALIAS
}
type Message {
	message: String!
}
# input type of createProduct
input CreateProductDto {
	name: String!
	description: String!
	category: ProductCategorys!
	price: Float!
	stock: Int!
}

# input type of updateProduct
input UpdateProductDto {
	name: String!
	description: String
	category: ProductCategorys!
	price: Float!
	stock: Int!
	isVisible: Boolean!
}

# type ProductImage {
#   id        :Int
#   url       :String
#   productId :Int
# }

type Like {
	id: Int!
	user: User
	userId: Int
	product: Product
	productId: Int
	createdAt: DateTime
	updatedAt: DateTime
}

type Cart {
	id: Int!
	user: User
	userId: Int!
	items: [CartItem]
	createdAt: DateTime
	updatedAt: DateTime
}

type CartItem {
	id: Int!
	cart: Cart
	cartId: Int!
	product: Product
	productId: Int!
	quantity: Int!
}
# input type for addItemToCart
input AddItemToCartDto {
	productId: Int!
	quantity: Int!
}

type Order {
	id: Int!
	user: User
	userId: Int
	items: [OrderItem]
	total: Float
	createdAt: DateTime
	updatedAt: DateTime
}

type OrderItem {
	id: Int!
	order: Order
	orderId: Int!
	product: Product
	productId: Int!
	price: Float!
	quantity: Int!
}

input ProductWhereInput {
	name: StringFilterInput
	price: Float
}

input StringFilterInput {
	equals: String
	in: [String]
	notIn: [String]
	lt: String
	lte: String
	gt: String
	gte: String
	contains: String
	startsWith: String
	endsWith: String
	not: String
}
